"""–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∑–Ω—ã—Ö –ø—Ä–æ–≤–∏–Ω—Ü–∏–π"""
import random
from collections import deque

class ConnectedProvinceGenerator:
    def __init__(self, island_cells):
        self.island_cells = set(island_cells)
        self.cell_list = list(island_cells)
        
    def generate_provinces(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤—è–∑–Ω—ã–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"""
        island_size = len(self.island_cells)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
        if island_size <= 15:
            target_provinces = 1
        elif island_size <= 25:
            target_provinces = 2
        elif island_size <= 40:
            target_provinces = 3
        elif island_size <= 60:
            target_provinces = 4
        else:
            target_provinces = min(6, island_size // 15)
        
        print(f"üó∫Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {target_provinces} —Å–≤—è–∑–Ω—ã—Ö –ø—Ä–æ–≤–∏–Ω—Ü–∏–π –¥–ª—è –æ—Å—Ç—Ä–æ–≤–∞ –∏–∑ {island_size} –∫–ª–µ—Ç–æ–∫")
        
        if target_provinces == 1:
            # –í–µ—Å—å –æ—Å—Ç—Ä–æ–≤ - –æ–¥–Ω–∞ –ø—Ä–æ–≤–∏–Ω—Ü–∏—è
            return [{'cells': self.cell_list}], {cell: 0 for cell in self.cell_list}
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤—è–∑–Ω—ã–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –º–µ—Ç–æ–¥–æ–º "—Ä–∞—Å—Ç—É—â–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π"
        return self._generate_connected_regions(target_provinces)
    
    def _generate_connected_regions(self, target_provinces):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤—è–∑–Ω—ã–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –º–µ—Ç–æ–¥–æ–º —Ä–∞—Å—Ç—É—â–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π"""
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞
        seed_points = self._select_distributed_seeds(target_provinces)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
        provinces = []
        province_map = {}
        growth_queues = []
        
        for i, seed in enumerate(seed_points):
            provinces.append({'cells': [seed]})
            province_map[seed] = i
            growth_queues.append(deque([seed]))
        
        # –†–∞—Å—Ç–∏–º –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ
        remaining_cells = set(self.island_cells) - set(seed_points)
        
        while remaining_cells:
            grown_this_round = False
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É (–º–µ–Ω—å—à–∏–µ —Ä–∞—Å—Ç—É—Ç –ø–µ—Ä–≤—ã–º–∏)
            province_order = sorted(range(len(provinces)), 
                                  key=lambda i: len(provinces[i]['cells']))
            
            for province_id in province_order:
                if not growth_queues[province_id] or not remaining_cells:
                    continue
                
                # –ë–µ—Ä–µ–º –∫–ª–µ—Ç–∫—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Ä–æ—Å—Ç–∞ —ç—Ç–æ–π –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
                current_cell = growth_queues[province_id].popleft()
                x, y = current_cell
                
                # –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Å–µ–¥–µ–π
                available_neighbors = []
                for dx, dy in [(0,1), (0,-1), (1,0), (-1,0)]:
                    neighbor = (x + dx, y + dy)
                    if neighbor in remaining_cells:
                        available_neighbors.append(neighbor)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–Ω–æ–≥–æ —Å–æ—Å–µ–¥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if available_neighbors:
                    new_cell = random.choice(available_neighbors)
                    provinces[province_id]['cells'].append(new_cell)
                    province_map[new_cell] = province_id
                    remaining_cells.remove(new_cell)
                    growth_queues[province_id].append(new_cell)
                    grown_this_round = True
                
                if not remaining_cells:
                    break
            
            # –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ —Å–º–æ–≥ –≤—ã—Ä–∞—Å—Ç–∏, –Ω–∞–∑–Ω–∞—á–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–ª–µ—Ç–∫–∏
            if not grown_this_round and remaining_cells:
                for cell in list(remaining_cells):
                    closest_province = self._find_closest_province(cell, province_map)
                    provinces[closest_province]['cells'].append(cell)
                    province_map[cell] = closest_province
                    remaining_cells.remove(cell)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"‚úÖ –°–≤—è–∑–Ω—ã–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã:")
        for i, province in enumerate(provinces):
            print(f"   –ü—Ä–æ–≤–∏–Ω—Ü–∏—è {i}: {len(province['cells'])} –∫–ª–µ—Ç–æ–∫")
        
        return provinces, province_map
    
    def _select_distributed_seeds(self, count):
        """–í—ã–±–∏—Ä–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏"""
        if count >= len(self.cell_list):
            return self.cell_list[:count]
        
        seeds = [random.choice(self.cell_list)]
        
        while len(seeds) < count:
            best_candidate = None
            best_min_distance = 0
            
            # –ò—â–µ–º —Ç–æ—á–∫—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω–Ω—É—é –æ—Ç –≤—Å–µ—Ö —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
            for candidate in self.cell_list:
                if candidate in seeds:
                    continue
                
                min_distance = min(
                    abs(candidate[0] - seed[0]) + abs(candidate[1] - seed[1])
                    for seed in seeds
                )
                
                if min_distance > best_min_distance:
                    best_min_distance = min_distance
                    best_candidate = candidate
            
            if best_candidate:
                seeds.append(best_candidate)
            else:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å–≤–æ–±–æ–¥–Ω—É—é
                available = [c for c in self.cell_list if c not in seeds]
                if available:
                    seeds.append(random.choice(available))
        
        return seeds
    
    def _find_closest_province(self, cell, province_map):
        """–ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à—É—é –ø—Ä–æ–≤–∏–Ω—Ü–∏—é –¥–ª—è –∫–ª–µ—Ç–∫–∏"""
        min_distance = float('inf')
        closest_province = 0
        
        for mapped_cell, province_id in province_map.items():
            distance = abs(cell[0] - mapped_cell[0]) + abs(cell[1] - mapped_cell[1])
            if distance < min_distance:
                min_distance = distance
                closest_province = province_id
        
        return closest_province
