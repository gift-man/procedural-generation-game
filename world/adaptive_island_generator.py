"""–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å –æ—Å—Ç—Ä–æ–≤–∞–º–∏"""
from world.generator import ProvinceGenerator

class AdaptiveIslandProvinceGenerator:
    def __init__(self, island_cells):
        self.island_cells = set(island_cells)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ—Å—Ç—Ä–æ–≤–∞
        self.temp_island = self._create_temp_island()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        self.province_generator = ProvinceGenerator(self.temp_island)
    
    def _create_temp_island(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å –≤–∞—à–∏–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º"""
        class TempIsland:
            def __init__(self, cells):
                self.cells = set(cells)
        
        return TempIsland(self.island_cells)
    
    def generate_provinces(self, target_count=None):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—è –≤–∞—à –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º"""
        print(f"üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è {len(self.island_cells)} –∫–ª–µ—Ç–æ–∫")
        
        # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–æ —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if target_count:
            # –í—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
            original_min = getattr(self.province_generator, 'MIN_PROVINCE_SIZE', 4)
            original_max = getattr(self.province_generator, 'MAX_PROVINCE_SIZE', 8)
            
            # –ü–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥ —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            avg_size = len(self.island_cells) / target_count
            self.province_generator.MIN_PROVINCE_SIZE = max(3, int(avg_size * 0.7))
            self.province_generator.MAX_PROVINCE_SIZE = min(12, int(avg_size * 1.5))
            
            print(f"   üìä –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {target_count}")
            print(f"   üìè –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {self.province_generator.MIN_PROVINCE_SIZE}-{self.province_generator.MAX_PROVINCE_SIZE}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        provinces, province_map = self.province_generator.generate_provinces()
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –∏–∑–º–µ–Ω—è–ª–∏
        if target_count:
            self.province_generator.MIN_PROVINCE_SIZE = original_min
            self.province_generator.MAX_PROVINCE_SIZE = original_max
        
        return provinces, province_map
