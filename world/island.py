"""–û—Å—Ç—Ä–æ–≤ —Å –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–∏–Ω—Ü–∏—è–º–∏"""
from core.settings import *
from world.resources import ResourceGenerator
from world.generator import ProvinceGenerator
import random
import math
from collections import deque

# –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
class ProceduralIslandGenerator:
    def __init__(self):
        pass
    
    def generate_connected_island(self, center_x, center_y, target_cells):
        """–ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û —Å–≤—è–∑–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç—Ä–æ–≤–∞"""
        print(f"üîó –°–≤—è–∑–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç—Ä–æ–≤–∞: {target_cells} –∫–ª–µ—Ç–æ–∫ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ ({center_x}, {center_y})")
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –∫–ª–µ—Ç–∫–∏
        island_cells = {(center_x, center_y)}
        growth_frontier = [(center_x, center_y)]
        
        while len(island_cells) < target_cells and growth_frontier:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–ª–µ—Ç–∫—É –∏–∑ –≥—Ä–∞–Ω–∏—Ü—ã —Ä–æ—Å—Ç–∞
            current_cell = random.choice(growth_frontier)
            x, y = current_cell
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Å–µ–¥–µ–π
            available_neighbors = []
            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
                neighbor = (x + dx, y + dy)
                if neighbor not in island_cells:
                    available_neighbors.append(neighbor)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å–µ–¥–∞ —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
            if available_neighbors and random.random() < 0.8:
                new_cell = random.choice(available_neighbors)
                island_cells.add(new_cell)
                growth_frontier.append(new_cell)
                
                # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
                if len(island_cells) >= target_cells:
                    break
            
            # –ò–Ω–æ–≥–¥–∞ —É–±–∏—Ä–∞–µ–º –∫–ª–µ—Ç–∫—É –∏–∑ –≥—Ä–∞–Ω–∏—Ü—ã —Ä–æ—Å—Ç–∞
            if random.random() < 0.3:
                growth_frontier.remove(current_cell)
            
            # –ï—Å–ª–∏ –≥—Ä–∞–Ω–∏—Ü–∞ —Ä–æ—Å—Ç–∞ –ø—É—Å—Ç–∞, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë
            if not growth_frontier:
                growth_frontier = self._get_border_cells(island_cells)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç–∏–≥–∞–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        island_cells = self._force_target_size(island_cells, target_cells)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–Ω–æ—Å—Ç—å
        if not self._is_connected(island_cells):
            print("‚ö†Ô∏è –û—Å—Ç—Ä–æ–≤ –Ω–µ—Å–≤—è–∑–Ω—ã–π, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...")
            island_cells = self._ensure_connectivity(island_cells)
        
        print(f"‚úÖ –°–≤—è–∑–Ω—ã–π –æ—Å—Ç—Ä–æ–≤: {len(island_cells)} –∫–ª–µ—Ç–æ–∫")
        return island_cells
    
    def _get_border_cells(self, island_cells):
        """–ù–∞—Ö–æ–¥–∏—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ –æ—Å—Ç—Ä–æ–≤–∞"""
        border = []
        for cell in island_cells:
            x, y = cell
            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
                neighbor = (x + dx, y + dy)
                if neighbor not in island_cells:
                    # –≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ –æ—Å—Ç—Ä–æ–≤–∞ –≥—Ä–∞–Ω–∏—á–∏—Ç —Å –ø—É—Å—Ç–æ—Ç–æ–π
                    if cell not in border:
                        border.append(cell)
                    break
        return border
    
    def _force_target_size(self, island_cells, target_cells):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"""
        island_set = set(island_cells)
        
        while len(island_set) < target_cells:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å–µ–¥–µ–π –∫ —Å–ª—É—á–∞–π–Ω—ã–º –∫–ª–µ—Ç–∫–∞–º
            border_cells = self._get_border_cells(island_set)
            if not border_cells:
                break
            
            random_border = random.choice(border_cells)
            x, y = random_border
            
            # –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Å–æ—Å–µ–¥–∞
            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
                neighbor = (x + dx, y + dy)
                if neighbor not in island_set:
                    island_set.add(neighbor)
                    break
            
            if len(island_set) >= target_cells:
                break
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –±–æ–ª—å—à–µ
        while len(island_set) > target_cells:
            border_cells = self._get_border_cells(island_set)
            if border_cells:
                # –£–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≥—Ä–∞–Ω–∏—á–Ω—É—é –∫–ª–µ—Ç–∫—É
                remove_cell = random.choice(border_cells)
                island_set.remove(remove_cell)
            else:
                break
        
        return island_set
    
    def _is_connected(self, cells):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤—è–∑–Ω–æ—Å—Ç—å –æ—Å—Ç—Ä–æ–≤–∞"""
        if not cells:
            return True
        
        cell_set = set(cells)
        start = next(iter(cell_set))
        visited = {start}
        queue = [start]
        
        while queue:
            current = queue.pop(0)
            x, y = current
            
            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
                neighbor = (x + dx, y + dy)
                if neighbor in cell_set and neighbor not in visited:
                    visited.add(neighbor)
                    queue.append(neighbor)
        
        return len(visited) == len(cell_set)
    
    def _ensure_connectivity(self, cells):
        """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–≤—è–∑–Ω–æ—Å—Ç—å –æ—Å—Ç—Ä–æ–≤–∞"""
        cell_set = set(cells)
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–≤—è–∑–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        components = []
        remaining = cell_set.copy()
        
        while remaining:
            start = next(iter(remaining))
            component = {start}
            queue = [start]
            remaining.remove(start)
            
            while queue:
                current = queue.pop(0)
                x, y = current
                
                for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
                    neighbor = (x + dx, y + dy)
                    if neighbor in remaining:
                        component.add(neighbor)
                        queue.append(neighbor)
                        remaining.remove(neighbor)
            
            components.append(component)
        
        # –ë–µ—Ä–µ–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
        largest_component = max(components, key=len)
        
        # –°–æ–µ–¥–∏–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å —Å–∞–º–æ–π –±–æ–ª—å—à–æ–π
        for component in components:
            if component != largest_component:
                # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–µ –∫–ª–µ—Ç–∫–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
                min_distance = float('inf')
                bridge_cells = []
                
                for cell1 in largest_component:
                    for cell2 in component:
                        distance = abs(cell1[0] - cell2[0]) + abs(cell1[1] - cell2[1])
                        if distance < min_distance:
                            min_distance = distance
                            bridge_cells = [cell1, cell2]
                
                # –°—Ç—Ä–æ–∏–º –º–æ—Å—Ç–∏–∫
                if bridge_cells:
                    path = self._build_path(bridge_cells[0], bridge_cells[1])
                    largest_component.update(path)
                    largest_component.update(component)
        
        return largest_component
    
    def _build_path(self, start, end):
        """–°—Ç—Ä–æ–∏—Ç –ø—Ä–æ—Å—Ç–æ–π –ø—É—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏"""
        path = set()
        x1, y1 = start
        x2, y2 = end
        
        # –î–≤–∏–≥–∞–µ–º—Å—è –ø–æ X
        while x1 != x2:
            path.add((x1, y1))
            x1 += 1 if x2 > x1 else -1
        
        # –î–≤–∏–≥–∞–µ–º—Å—è –ø–æ Y
        while y1 != y2:
            path.add((x1, y1))
            y1 += 1 if y2 > y1 else -1
        
        path.add((x2, y2))
        return path


class ConnectedProvinceGenerator:
    def __init__(self, island_cells):
        self.island_cells = set(island_cells)
        self.cell_list = list(island_cells)
        
    def generate_provinces(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤—è–∑–Ω—ã–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"""
        island_size = len(self.island_cells)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
        if island_size <= 15:
            target_provinces = 1
        elif island_size <= 25:
            target_provinces = 2
        elif island_size <= 40:
            target_provinces = 3
        elif island_size <= 60:
            target_provinces = 4
        else:
            target_provinces = min(6, island_size // 15)
        
        print(f"üó∫Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {target_provinces} —Å–≤—è–∑–Ω—ã—Ö –ø—Ä–æ–≤–∏–Ω—Ü–∏–π –¥–ª—è –æ—Å—Ç—Ä–æ–≤–∞ –∏–∑ {island_size} –∫–ª–µ—Ç–æ–∫")
        
        if target_provinces == 1:
            # –í–µ—Å—å –æ—Å—Ç—Ä–æ–≤ - –æ–¥–Ω–∞ –ø—Ä–æ–≤–∏–Ω—Ü–∏—è
            return [{'cells': self.cell_list}], {cell: 0 for cell in self.cell_list}
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤—è–∑–Ω—ã–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –º–µ—Ç–æ–¥–æ–º "—Ä–∞—Å—Ç—É—â–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π"
        return self._generate_connected_regions(target_provinces)
    
    def _generate_connected_regions(self, target_provinces):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤—è–∑–Ω—ã–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –º–µ—Ç–æ–¥–æ–º —Ä–∞—Å—Ç—É—â–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π"""
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞
        seed_points = self._select_distributed_seeds(target_provinces)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
        provinces = []
        province_map = {}
        growth_queues = []
        
        for i, seed in enumerate(seed_points):
            provinces.append({'cells': [seed]})
            province_map[seed] = i
            growth_queues.append(deque([seed]))
        
        # –†–∞—Å—Ç–∏–º –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ
        remaining_cells = set(self.island_cells) - set(seed_points)
        
        while remaining_cells:
            grown_this_round = False
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É (–º–µ–Ω—å—à–∏–µ —Ä–∞—Å—Ç—É—Ç –ø–µ—Ä–≤—ã–º–∏)
            province_order = sorted(range(len(provinces)), 
                                  key=lambda i: len(provinces[i]['cells']))
            
            for province_id in province_order:
                if not growth_queues[province_id] or not remaining_cells:
                    continue
                
                # –ë–µ—Ä–µ–º –∫–ª–µ—Ç–∫—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Ä–æ—Å—Ç–∞ —ç—Ç–æ–π –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
                current_cell = growth_queues[province_id].popleft()
                x, y = current_cell
                
                # –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Å–µ–¥–µ–π
                available_neighbors = []
                for dx, dy in [(0,1), (0,-1), (1,0), (-1,0)]:
                    neighbor = (x + dx, y + dy)
                    if neighbor in remaining_cells:
                        available_neighbors.append(neighbor)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–Ω–æ–≥–æ —Å–æ—Å–µ–¥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if available_neighbors:
                    new_cell = random.choice(available_neighbors)
                    provinces[province_id]['cells'].append(new_cell)
                    province_map[new_cell] = province_id
                    remaining_cells.remove(new_cell)
                    growth_queues[province_id].append(new_cell)
                    grown_this_round = True
                
                if not remaining_cells:
                    break
            
            # –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ —Å–º–æ–≥ –≤—ã—Ä–∞—Å—Ç–∏, –Ω–∞–∑–Ω–∞—á–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–ª–µ—Ç–∫–∏
            if not grown_this_round and remaining_cells:
                for cell in list(remaining_cells):
                    closest_province = self._find_closest_province(cell, province_map)
                    provinces[closest_province]['cells'].append(cell)
                    province_map[cell] = closest_province
                    remaining_cells.remove(cell)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"‚úÖ –°–≤—è–∑–Ω—ã–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã:")
        for i, province in enumerate(provinces):
            print(f"   –ü—Ä–æ–≤–∏–Ω—Ü–∏—è {i}: {len(province['cells'])} –∫–ª–µ—Ç–æ–∫")
        
        return provinces, province_map
    
    def _select_distributed_seeds(self, count):
        """–í—ã–±–∏—Ä–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏"""
        if count >= len(self.cell_list):
            return self.cell_list[:count]
        
        seeds = [random.choice(self.cell_list)]
        
        while len(seeds) < count:
            best_candidate = None
            best_min_distance = 0
            
            # –ò—â–µ–º —Ç–æ—á–∫—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω–Ω—É—é –æ—Ç –≤—Å–µ—Ö —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
            for candidate in self.cell_list:
                if candidate in seeds:
                    continue
                
                min_distance = min(
                    abs(candidate[0] - seed[0]) + abs(candidate[1] - seed[1])
                    for seed in seeds
                )
                
                if min_distance > best_min_distance:
                    best_min_distance = min_distance
                    best_candidate = candidate
            
            if best_candidate:
                seeds.append(best_candidate)
            else:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å–≤–æ–±–æ–¥–Ω—É—é
                available = [c for c in self.cell_list if c not in seeds]
                if available:
                    seeds.append(random.choice(available))
        
        return seeds
    
    def _find_closest_province(self, cell, province_map):
        """–ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à—É—é –ø—Ä–æ–≤–∏–Ω—Ü–∏—é –¥–ª—è –∫–ª–µ—Ç–∫–∏"""
        min_distance = float('inf')
        closest_province = 0
        
        for mapped_cell, province_id in province_map.items():
            distance = abs(cell[0] - mapped_cell[0]) + abs(cell[1] - mapped_cell[1])
            if distance < min_distance:
                min_distance = distance
                closest_province = province_id
        
        return closest_province

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –æ—Å—Ç—Ä–æ–≤–∞
class Island:
    def __init__(self):
        self.cells = set()
        self.resources = {}
        self.resource_generator = ResourceGenerator()
        self.procedural_generator = ProceduralIslandGenerator()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Å—Ç—Ä–æ–≤–∞—Ö
        self.islands_info = []
        
        self.load_from_matrix()
        self.generate_resources()
        
    def _generate_connected_island(self, center_x, center_y, target_size):
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–≤—è–∑–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Å—Ç—Ä–æ–≤–∞"""
        return self.procedural_generator.generate_connected_island(center_x, center_y, target_size)
    
    def load_from_matrix(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Å—Ç—Ä–æ–≤ + –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω—ã–µ –æ—Å—Ç—Ä–æ–≤–∞"""
        print("=== –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–°–¢–†–û–í–û–í ===")
        
        # 1. –û—Å–Ω–æ–≤–Ω–æ–π –æ—Å—Ç—Ä–æ–≤ (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π - –≤—Å–µ–≥–¥–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π)
        main_island_cells = set()
        for row_idx, row in enumerate(ISLAND_MATRIX):
            for col_idx, cell in enumerate(row):
                if cell == 1:
                    x = col_idx + ISLAND_OFFSET_X
                    y = row_idx + ISLAND_OFFSET_Y
                    self.cells.add((x, y))
                    main_island_cells.add((x, y))
        
        self.islands_info.append({
            'name': '–ì–ª–∞–≤–Ω—ã–π –æ—Å—Ç—Ä–æ–≤',
            'cells': main_island_cells,
            'type': 'main',
            'provinces': [],
            'province_map': {}
        })
        
        print(f"–ì–ª–∞–≤–Ω—ã–π –æ—Å—Ç—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω: {len(main_island_cells)} –∫–ª–µ—Ç–æ–∫")
        
        # 2. –ü–†–û–¶–ï–î–£–†–ù–´–ï –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Å—Ç—Ä–æ–≤–∞
        self._generate_additional_islands()
        
        print(f"–í—Å–µ–≥–æ –∫–ª–µ—Ç–æ–∫ —Å—É—à–∏: {len(self.cells)}")
    
    def _generate_additional_islands(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≥—Ä–∞–Ω–∏—Ü"""
        
        # –§–ò–ö–°–ò–†–û–í–ê–ù–ù–û–ï –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç—Ä–æ–≤–æ–≤
        num_islands = 2  # –í—Å–µ–≥–¥–∞ 2 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Å—Ç—Ä–æ–≤–∞
        main_max_x = max(cell[0] for cell in self.cells) if self.cells else 15
        
        for island_num in range(num_islands):
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°—Ç—Ä–æ–≥–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –≥—Ä–∞–Ω–∏—Ü–∞—Ö —ç–∫—Ä–∞–Ω–∞
            if island_num == 0:
                # –ü–µ—Ä–≤—ã–π –æ—Å—Ç—Ä–æ–≤ - –±–ª–∏–∑–∫–æ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É
                center_x = main_max_x + 4
                center_y = ISLAND_OFFSET_Y + 3
            else:
                # –í—Ç–æ—Ä–æ–π –æ—Å—Ç—Ä–æ–≤ - –ø—Ä–∞–≤–µ–µ –ø–µ—Ä–≤–æ–≥–æ
                center_x = main_max_x + 8
                center_y = ISLAND_OFFSET_Y + 6
            
            # –ñ–ï–°–¢–ö–ò–ï –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º —ç–∫—Ä–∞–Ω–∞
            max_allowed_x = (SCREEN_WIDTH // CELL_SIZE) - 8  # –û—Ç—Å—Ç—É–ø –≤ 8 –∫–ª–µ—Ç–æ–∫ –æ—Ç –∫—Ä–∞—è
            max_allowed_y = (SCREEN_HEIGHT // CELL_SIZE) - 8
            
            center_x = min(center_x, max_allowed_x)
            center_y = min(center_y, max_allowed_y)
            center_y = max(center_y, 5)  # –ú–∏–Ω–∏–º—É–º 5 –∫–ª–µ—Ç–æ–∫ –æ—Ç –≤–µ—Ä—Ö–∞
            
            print(f"üèùÔ∏è –û—Å—Ç—Ä–æ–≤ #{island_num + 1}: –ø–æ–∑–∏—Ü–∏—è ({center_x}, {center_y})")
            print(f"   –ì—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞: –º–∞–∫—Å X={max_allowed_x}, –º–∞–∫—Å Y={max_allowed_y}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ú–ê–õ–ï–ù–¨–ö–ò–ô –æ—Å—Ç—Ä–æ–≤
            new_island_cells = self.procedural_generator.generate_island(
                center_x, center_y, "small"  # –¢–û–õ–¨–ö–û –º–∞–ª–µ–Ω—å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞
            )
            
            # –°–¢–†–û–ì–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü —ç–∫—Ä–∞–Ω–∞
            valid_cells = set()
            for cell in new_island_cells:
                x, y = cell
                if (0 <= x < (SCREEN_WIDTH // CELL_SIZE) - 2 and 
                    0 <= y < (SCREEN_HEIGHT // CELL_SIZE) - 2):
                    valid_cells.add(cell)
            
            # –ü–†–û–í–ï–†–ö–ê –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –æ—Å—Ç—Ä–æ–≤–∞–º–∏
            if self._check_island_separation(valid_cells):
                self.cells.update(valid_cells)
                
                self.islands_info.append({
                    'name': f'–û—Å—Ç—Ä–æ–≤ #{island_num + 1}',
                    'cells': valid_cells,
                    'type': 'procedural',
                    'provinces': [],
                    'province_map': {}
                })
                
                print(f"‚úÖ –û—Å—Ç—Ä–æ–≤ #{island_num + 1} —Å–æ–∑–¥–∞–Ω: {len(valid_cells)} –∫–ª–µ—Ç–æ–∫")
            else:
                print(f"‚ùå –û—Å—Ç—Ä–æ–≤ #{island_num + 1} –æ—Ç–∫–ª–æ–Ω–µ–Ω - –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –¥—Ä—É–≥–∏–º–∏")

    def _check_island_separation(self, new_island_cells):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –Ω–æ–≤—ã–π –æ—Å—Ç—Ä–æ–≤ –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏"""
        min_distance = 2  # –ú–∏–Ω–∏–º—É–º 2 –∫–ª–µ—Ç–∫–∏ –º–µ–∂–¥—É –æ—Å—Ç—Ä–æ–≤–∞–º–∏
        
        for new_cell in new_island_cells:
            for existing_cell in self.cells:
                distance = max(abs(new_cell[0] - existing_cell[0]), 
                            abs(new_cell[1] - existing_cell[1]))
                if distance < min_distance:
                    return False
        return True

    
    def generate_provinces_for_islands(self):
        """–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - –û–î–ò–ù–ê–ö–û–í–ê–Ø –ª–æ–≥–∏–∫–∞ –¥–ª—è –í–°–ï–• –æ—Å—Ç—Ä–æ–≤–æ–≤"""
        print("\n=== –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–†–û–í–ò–ù–¶–ò–ô ===")
        
        all_provinces = []
        all_province_map = {}
        province_id_offset = 0
        
        for island_info in self.islands_info:
            island_name = island_info['name']
            island_cells = island_info['cells']
            island_type = island_info['type']
            
            print(f"\nüèùÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ {island_name} ({len(island_cells)} –∫–ª–µ—Ç–æ–∫):")
            
            if len(island_cells) < 10:
                print(f"   ‚ö†Ô∏è –û—Å—Ç—Ä–æ–≤ —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è –ø—Ä–æ–≤–∏–Ω—Ü–∏–π")
                continue
            
            # –ï–î–ò–ù–ê–Ø –õ–û–ì–ò–ö–ê: –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –í–°–ï–• –æ—Å—Ç—Ä–æ–≤–æ–≤
            print("   üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ê–î–ê–ü–¢–ò–í–ù–´–ô –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç—Ä–æ–≤–æ–≤")
            temp_island = self._create_temp_island(island_cells)
            province_gen = ProvinceGenerator(temp_island)
            
            # –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
            if island_type == 'main':
                # –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Å—Ç—Ä–æ–≤–∞ - 15 –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
                province_gen.target_province_count = 15
            else:
                # –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Å—Ç—Ä–æ–≤–æ–≤ - –ü–†–û–ü–û–†–¶–ò–û–ù–ê–õ–¨–ù–û–ï –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                main_island_size = len(self.islands_info[0]['cells'])  # –†–∞–∑–º–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ
                current_island_size = len(island_cells)
                
                # –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ: 15 –ø—Ä–æ–≤–∏–Ω—Ü–∏–π * (—Ä–∞–∑–º–µ—Ä_–æ—Å—Ç—Ä–æ–≤–∞ / —Ä–∞–∑–º–µ—Ä_–æ—Å–Ω–æ–≤–Ω–æ–≥–æ)
                proportional_count = int(15 * (current_island_size / main_island_size))
                proportional_count = max(3, min(proportional_count, 8))  # –û—Ç 3 –¥–æ 8 –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
                
                province_gen.target_province_count = proportional_count
                print(f"   üìä –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π: {proportional_count}")
            
            # –û–î–ò–ù–ê–ö–û–í–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç—Ä–æ–≤–æ–≤
            province_gen.MAX_ATTEMPTS = 10000
            
            island_provinces, island_province_map = province_gen.generate_provinces()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            formatted_provinces = []
            for i, province in enumerate(island_provinces):
                formatted_provinces.append({
                    'id': i + province_id_offset,
                    'cells': province['cells'],
                    'island': island_name
                })
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º ID –≤ –∫–∞—Ä—Ç–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
            corrected_map = {
                cell: pid + province_id_offset 
                for cell, pid in island_province_map.items()
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–µ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            all_provinces.extend(formatted_provinces)
            all_province_map.update(corrected_map)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Å—Ç—Ä–æ–≤–µ
            island_info['provinces'] = formatted_provinces
            island_info['province_map'] = corrected_map
            
            province_id_offset += len(formatted_provinces)
            
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(formatted_provinces)} –ø—Ä–æ–≤–∏–Ω—Ü–∏–π")
        
        print(f"\nüéØ –ò–¢–û–ì–û: {len(all_provinces)} –ø—Ä–æ–≤–∏–Ω—Ü–∏–π –Ω–∞ {len(self.islands_info)} –æ—Å—Ç—Ä–æ–≤–∞—Ö")
        print(f"\nüîç –û–¢–õ–ê–î–ö–ê –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"   –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞: {SCREEN_WIDTH}x{SCREEN_HEIGHT}")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: X={SCREEN_WIDTH//CELL_SIZE}, Y={SCREEN_HEIGHT//CELL_SIZE}")

        for island_info in self.islands_info:
            if island_info['cells']:
                min_x = min(cell[0] for cell in island_info['cells'])
                max_x = max(cell[0] for cell in island_info['cells'])
                min_y = min(cell[1] for cell in island_info['cells'])
                max_y = max(cell[1] for cell in island_info['cells'])
                
                print(f"   {island_info['name']}: X({min_x}-{max_x}), Y({min_y}-{max_y})")
                
                if max_x >= SCREEN_WIDTH//CELL_SIZE:
                    print(f"     ‚ùå –í–´–•–û–î–ò–¢ –ó–ê –ü–†–ê–í–£–Æ –ì–†–ê–ù–ò–¶–£!")
                if max_y >= SCREEN_HEIGHT//CELL_SIZE:
                    print(f"     ‚ùå –í–´–•–û–î–ò–¢ –ó–ê –ù–ò–ñ–ù–Æ–Æ –ì–†–ê–ù–ò–¶–£!")
        return all_provinces, all_province_map
    
    def _calculate_island_distribution(self, total_cells=100):
        """–°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–µ—Ç–æ–∫ –º–µ–∂–¥—É –æ—Å—Ç—Ä–æ–≤–∞–º–∏"""
        
        distributions = [
            # [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Å—Ç—Ä–æ–≤–æ–≤, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π_—Ä–∞–∑–º–µ—Ä_–∫–∞–∂–¥–æ–≥–æ]
            ([1], [total_cells]),  # 1 –±–æ–ª—å—à–æ–π –æ—Å—Ç—Ä–æ–≤
            ([2], [total_cells // 2, total_cells - total_cells // 2]),  # 2 –æ—Å—Ç—Ä–æ–≤–∞
            ([3], [total_cells // 3, total_cells // 3, total_cells - 2 * (total_cells // 3)]),  # 3 –æ—Å—Ç—Ä–æ–≤–∞
            ([4], [total_cells // 4] * 4),  # 4 –æ—Å—Ç—Ä–æ–≤–∞ –ø–æ 25
        ]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≥–¥–µ –≤—Å–µ –æ—Å—Ç—Ä–æ–≤–∞ >= 4 –∫–ª–µ—Ç–æ–∫
        valid_distributions = []
        for counts, sizes in distributions:
            if all(size >= 4 for size in sizes):
                valid_distributions.append((counts, sizes))
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        chosen_counts, base_sizes = random.choice(valid_distributions)
        
        print(f"üé≤ –í—ã–±—Ä–∞–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {len(base_sizes)} –æ—Å—Ç—Ä–æ–≤–æ–≤ —Ä–∞–∑–º–µ—Ä–∞–º–∏ {base_sizes}")
        return base_sizes

    def _generate_additional_islands(self):
        """–ù–û–í–ê–Ø —Å–∏—Å—Ç–µ–º–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–æ–≤"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤
        island_sizes = self._calculate_island_distribution(100)
        
        main_max_x = max(cell[0] for cell in self.cells) if self.cells else 15
        
        for island_num, target_size in enumerate(island_sizes):
            # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç—Ä–æ–≤–æ–≤
            if island_num == 0:
                center_x = main_max_x + 5
                center_y = ISLAND_OFFSET_Y + 3
            elif island_num == 1:
                center_x = main_max_x + 12
                center_y = ISLAND_OFFSET_Y + 6
            elif island_num == 2:
                center_x = main_max_x + 8
                center_y = ISLAND_OFFSET_Y + 10
            else:
                center_x = main_max_x + 15
                center_y = ISLAND_OFFSET_Y + 2
            
            # –ñ–µ—Å—Ç–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü
            max_allowed_x = (SCREEN_WIDTH // CELL_SIZE) - 10
            max_allowed_y = (SCREEN_HEIGHT // CELL_SIZE) - 10
            
            center_x = min(center_x, max_allowed_x)
            center_y = min(center_y, max_allowed_y)
            center_y = max(center_y, 5)
            
            print(f"üèùÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç—Ä–æ–≤–∞ #{island_num + 1}: —Ü–µ–ª—å {target_size} –∫–ª–µ—Ç–æ–∫ –≤ –ø–æ–∑–∏—Ü–∏–∏ ({center_x}, {center_y})")
            
            # –ù–û–í–´–ô –∞–ª–≥–æ—Ä–∏—Ç–º —Å–≤—è–∑–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            new_island_cells = self._generate_connected_island(center_x, center_y, target_size)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Å—Ç—Ä–æ–≤–æ–≤
            if self._check_island_separation(new_island_cells):
                self.cells.update(new_island_cells)
                
                self.islands_info.append({
                    'name': f'–û—Å—Ç—Ä–æ–≤ #{island_num + 1}',
                    'cells': new_island_cells,
                    'type': 'procedural',
                    'provinces': [],
                    'province_map': {}
                })
                
                print(f"‚úÖ –û—Å—Ç—Ä–æ–≤ #{island_num + 1} —Å–æ–∑–¥–∞–Ω: {len(new_island_cells)} –∫–ª–µ—Ç–æ–∫")
            else:
                print(f"‚ùå –û—Å—Ç—Ä–æ–≤ #{island_num + 1} –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        
    def _create_temp_island(self, island_cells):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ—Å—Ç—Ä–æ–≤–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π"""
        class TempIsland:
            def __init__(self, cells):
                self.cells = set(cells)
        
        return TempIsland(island_cells)
    
    def generate_resources(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç—Ä–æ–≤–æ–≤"""
        print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç—Ä–æ–≤–æ–≤...")
        self.resources.clear()
        
        for island_info in self.islands_info:
            island_name = island_info['name']
            island_cells = island_info['cells']
            island_type = island_info['type']
            
            print(f"\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è {island_name}:")
            
            if island_type == 'main':
                island_resources = self.resource_generator.generate_resources_for_island(island_cells)
            else:
                # –î–ª—è –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω—ã—Ö –æ—Å—Ç—Ä–æ–≤–æ–≤ - –æ—Å–æ–±–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
                if hasattr(self.resource_generator, 'generate_resources_for_secondary_island'):
                    island_resources = self.resource_generator.generate_resources_for_secondary_island(island_cells)
                else:
                    island_resources = self.resource_generator.generate_resources_for_island(island_cells)
            
            self.resources.update(island_resources)
        
        self._print_total_stats()
    
    def _print_total_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Å—Ç—Ä–æ–≤–∞–º"""
        print(f"\n=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–°–¢–†–û–í–û–í ===")
        for island_info in self.islands_info:
            island_name = island_info['name']
            island_cells = island_info['cells']
            
            print(f"\n{island_name} ({len(island_cells)} –∫–ª–µ—Ç–æ–∫):")
            resource_counts = {}
            for cell in island_cells:
                resource = self.resources.get(cell)
                if resource:
                    resource_counts[resource] = resource_counts.get(resource, 0) + 1
            
            for resource_type, count in resource_counts.items():
                name = self.resource_generator.get_resource_name(resource_type)
                percentage = (count / len(island_cells)) * 100
                print(f"   {name}: {count} –∫–ª–µ—Ç–æ–∫ ({percentage:.1f}%)")
    
    def regenerate_islands(self):
        """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ—Å—Ç—Ä–æ–≤–∞"""
        print("\n=== –ü–ï–†–ï–ì–ï–ù–ï–†–ê–¶–ò–Ø –û–°–¢–†–û–í–û–í ===")
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.cells.clear()
        self.resources.clear()
        self.islands_info.clear()
        
        # –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º
        self.load_from_matrix()
        self.generate_resources()
        
        print("‚úÖ –û—Å—Ç—Ä–æ–≤–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    # –ú–µ—Ç–æ–¥—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã
    def get_island_info(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –æ—Å—Ç—Ä–æ–≤–∞—Ö"""
        return self.islands_info
    
    def get_island_by_cell(self, x, y):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫ –∫–∞–∫–æ–º—É –æ—Å—Ç—Ä–æ–≤—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–ª–µ—Ç–∫–∞"""
        for island_info in self.islands_info:
            if (x, y) in island_info['cells']:
                return island_info
        return None
    
    def get_resource(self, x, y):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å –∫–ª–µ—Ç–∫–∏"""
        return self.resources.get((x, y))
    
    def is_land(self, x, y):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–ª–µ—Ç–∫–∞ —Å—É—à–µ–π"""
        return (x, y) in self.cells
    
    def get_neighbors(self, x, y):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å–µ–¥–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ —Å—É—à–∏"""
        neighbors = []
        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
            nx, ny = x + dx, y + dy
            if self.is_land(nx, ny):
                neighbors.append((nx, ny))
        return neighbors
    
    def get_total_cells(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—Ç–æ–∫ —Å—É—à–∏"""
        return len(self.cells)
    
    def get_islands_count(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç—Ä–æ–≤–æ–≤"""
        return len(self.islands_info)
    
    def get_island_names(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Å–µ—Ö –æ—Å—Ç—Ä–æ–≤–æ–≤"""
        return [island['name'] for island in self.islands_info]
