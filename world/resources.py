"""–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Å–∏—Å—Ç–µ–º–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–´–ú–ò —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤"""
import random
import math
from collections import deque

class ResourceType:
    MEADOW = "meadow"        # –õ—É–≥–∞ (—Ñ–µ—Ä–º—ã)
    FOREST = "forest"        # –õ–µ—Å–∞ (–ª–µ—Å–æ–ø–∏–ª–∫–∏) 
    STONE = "stone"          # –ö–∞–º–µ–Ω–æ–ª–æ–º–Ω–∏
    GOLD_MINE = "gold_mine"  # –ó–æ–ª–æ—Ç—ã–µ —à–∞—Ö—Ç—ã

class ResourceGenerator:
    def __init__(self):
        # –ë–∞–∑–æ–≤—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        self.base_ratios = {
            ResourceType.MEADOW: 0.60,    # 60% - –ª—É–≥–∞
            ResourceType.FOREST: 0.25,    # 25% - –ª–µ—Å–∞
            ResourceType.STONE: 0.10,     # 10% - –∫–∞–º–µ–Ω—å
            ResourceType.GOLD_MINE: 0.05  # 5% - –∑–æ–ª–æ—Ç–æ
        }
        
        # –°–¢–†–û–ì–ò–ï –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        self.min_cluster_sizes = {
            ResourceType.FOREST: 4,       # –õ–µ—Å: –°–¢–†–û–ì–û –º–∏–Ω–∏–º—É–º 4 –∫–ª–µ—Ç–∫–∏
            ResourceType.STONE: 2,        # –ö–∞–º–µ–Ω—å: –°–¢–†–û–ì–û –º–∏–Ω–∏–º—É–º 2 –∫–ª–µ—Ç–∫–∏
            ResourceType.GOLD_MINE: 1     # –ó–æ–ª–æ—Ç–æ: –º–∏–Ω–∏–º—É–º 1 –∫–ª–µ—Ç–∫–∞
        }
        
        # –†–∞–∑–±—Ä–æ—Å –¥–ª—è –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.variance = 0.10
        
        # –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–∫
        self.building_yields = {
            ResourceType.MEADOW: {"gold": 1, "building": "–§–µ—Ä–º–∞"},
            ResourceType.FOREST: {"materials": 1, "building": "–õ–µ—Å–æ–ø–∏–ª–∫–∞"},
            ResourceType.STONE: {"materials": 3, "building": "–ö–∞–º–µ–Ω–æ–ª–æ–º–Ω—è"},
            ResourceType.GOLD_MINE: {"gold": 10, "building": "–ó–æ–ª–æ—Ç–∞—è —à–∞—Ö—Ç–∞"}
        }

    def get_resource_name(self, resource_type):
        names = {
            ResourceType.MEADOW: "–õ—É–≥–∞",
            ResourceType.FOREST: "–õ–µ—Å–∞", 
            ResourceType.STONE: "–ö–∞–º–µ–Ω–æ–ª–æ–º–Ω–∏",
            ResourceType.GOLD_MINE: "–ó–æ–ª–æ—Ç—ã–µ —à–∞—Ö—Ç—ã"
        }
        return names.get(resource_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    def get_building_yield(self, resource_type):
        return self.building_yields.get(resource_type, {})

    def get_resource_color(self, resource_type):
        colors = {
            ResourceType.MEADOW: (144, 238, 144),
            ResourceType.FOREST: (34, 139, 34),
            ResourceType.STONE: (105, 105, 105),
            ResourceType.GOLD_MINE: (255, 215, 0)
        }
        return colors.get(resource_type, (144, 238, 144))

    def get_building_description(self, resource_type):
        yield_info = self.building_yields.get(resource_type, {})
        building = yield_info.get("building", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        if "gold" in yield_info:
            return f"{building} (+{yield_info['gold']} –∑–æ–ª–æ—Ç–æ/—Ö–æ–¥)"
        elif "materials" in yield_info:
            return f"{building} (+{yield_info['materials']} –º–∞—Ç–µ—Ä–∏–∞–ª/—Ö–æ–¥)"
        else:
            return building

    def generate_resources_for_island(self, island_cells):
        """–°–¢–†–û–ì–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–´–ú–ò —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤"""
        print("=== –°–¢–†–û–ì–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –° –ì–ê–†–ê–ù–¢–ò–Ø–ú–ò ===")
        
        island_list = list(island_cells)
        total_cells = len(island_list)
        resources = {}
        
        print(f"–í—Å–µ–≥–æ –∫–ª–µ—Ç–æ–∫ –æ—Å—Ç—Ä–æ–≤–∞: {total_cells}")
        
        # 1. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—Ç–æ–∫ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞
        resource_allocations = self._calculate_strict_allocations(total_cells)
        
        # 2. –ü–ª–∞–Ω–∏—Ä—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã —Å –ì–ê–†–ê–ù–¢–ò–ï–ô —Ä–∞–∑–º–µ—Ä–æ–≤
        cluster_plans = self._plan_guaranteed_clusters(resource_allocations)
        
        # 3. –†–∞–∑–º–µ—â–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã –ë–ï–ó –ü–ï–†–ï–ö–†–´–¢–ò–ô
        used_indices = set()
        
        # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É: —Å–Ω–∞—á–∞–ª–∞ —Å–∞–º—ã–µ —Ç—Ä–µ–±–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ
        resource_order = [ResourceType.FOREST, ResourceType.STONE, ResourceType.GOLD_MINE]
        
        for resource_type in resource_order:
            if resource_type in cluster_plans:
                print(f"\n{self._get_resource_emoji(resource_type)} –°–¢–†–û–ì–û–ï —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ {self.get_resource_name(resource_type)}:")
                clusters = self._place_guaranteed_clusters(
                    island_list, used_indices, cluster_plans[resource_type], resource_type
                )
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
                total_placed = 0
                for cluster_id, cluster in enumerate(clusters):
                    if len(cluster) >= self.min_cluster_sizes[resource_type]:
                        for idx in cluster:
                            resources[island_list[idx]] = resource_type
                            total_placed += 1
                        print(f"    ‚úÖ –ö–ª–∞—Å—Ç–µ—Ä {cluster_id + 1}: {len(cluster)} –∫–ª–µ—Ç–æ–∫ (–í–ê–õ–ò–î–ù–´–ô)")
                    else:
                        print(f"    ‚ùå –ö–ª–∞—Å—Ç–µ—Ä {cluster_id + 1}: {len(cluster)} –∫–ª–µ—Ç–æ–∫ (–û–¢–ë–†–û–®–ï–ù - —Å–ª–∏—à–∫–æ–º –º–∞–ª)")
                
                print(f"    üìä –í—Å–µ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–æ {self.get_resource_name(resource_type)}: {total_placed} –∫–ª–µ—Ç–æ–∫")
        
        # 4. –û—Å—Ç–∞–ª—å–Ω–æ–µ - –ª—É–≥–∞
        meadow_count = 0
        for i, cell in enumerate(island_list):
            if i not in used_indices:
                resources[cell] = ResourceType.MEADOW
                meadow_count += 1
        
        print(f"\nüå± –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ª—É–≥–∞–º–∏: {meadow_count} –∫–ª–µ—Ç–æ–∫")
        
        # 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        self._verify_cluster_sizes(resources, island_cells)
        
        return resources

    def _calculate_strict_allocations(self, total_cells):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—Ç–æ–∫ —Å —É—á—ë—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
        allocations = {}
        
        print("\nüìä –°–¢–†–û–ì–ò–ô –†–ê–°–ß–Å–¢ –†–ï–°–£–†–°–û–í:")
        
        for resource_type, base_ratio in self.base_ratios.items():
            if resource_type == ResourceType.MEADOW:
                continue
                
            # –ë–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            base_amount = int(total_cells * base_ratio)
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞
            min_amount = self.min_cluster_sizes[resource_type]
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ö–≤–∞—Ç–∞–µ—Ç –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞
            final_amount = max(min_amount, base_amount)
            
            allocations[resource_type] = final_amount
            
            print(f"  {self.get_resource_name(resource_type)}: {final_amount} –∫–ª–µ—Ç–æ–∫ "
                  f"(–º–∏–Ω–∏–º—É–º: {min_amount}, –±–∞–∑–æ–≤–æ: {base_amount})")
        
        return allocations

    def _plan_guaranteed_clusters(self, resource_allocations):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Ç–µ—Ä—ã —Å –ì–ê–†–ê–ù–¢–ò–ï–ô –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤"""
        cluster_plans = {}
        
        print("\nüîí –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –° –ì–ê–†–ê–ù–¢–ò–Ø–ú–ò:")
        
        for resource_type, total_amount in resource_allocations.items():
            min_size = self.min_cluster_sizes[resource_type]
            max_size = max(min_size, total_amount // 3)  # –ú–∞–∫—Å–∏–º—É–º = —Ç—Ä–µ—Ç—å
            
            print(f"  {self.get_resource_name(resource_type)}: {total_amount} –∫–ª–µ—Ç–æ–∫")
            print(f"    –î–∏–∞–ø–∞–∑–æ–Ω —Ä–∞–∑–º–µ—Ä–æ–≤: {min_size} - {max_size}")
            
            # –°–¢–†–û–ì–û –ø–ª–∞–Ω–∏—Ä—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã
            cluster_sizes = self._plan_strict_clusters(total_amount, min_size, max_size)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∫–ª–∞—Å—Ç–µ—Ä—ã –≤–∞–ª–∏–¥–Ω—ã
            valid_clusters = [size for size in cluster_sizes if size >= min_size]
            
            cluster_plans[resource_type] = {
                'cluster_count': len(valid_clusters),
                'cluster_sizes': valid_clusters,
                'total_cells': sum(valid_clusters),
                'size_range': (min_size, max_size)
            }
            
            print(f"    –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã: {valid_clusters}")
            print(f"    –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö: {len(valid_clusters)}")
        
        return cluster_plans

    def _plan_strict_clusters(self, total_amount, min_size, max_size):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Ç–µ—Ä—ã –ë–ï–ó –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞"""
        cluster_sizes = []
        remaining_cells = total_amount
        
        while remaining_cells >= min_size:
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –∫–ª–µ—Ç–∫–∞–º–∏
            current_max_size = min(max_size, remaining_cells)
            
            # –ï—Å–ª–∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–ª–µ—Ç–æ–∫ –º–µ–Ω—å—à–µ —á–µ–º min_size * 2, —Å–æ–∑–¥–∞—ë–º –æ–¥–∏–Ω –±–æ–ª—å—à–æ–π –∫–ª–∞—Å—Ç–µ—Ä
            if remaining_cells < min_size * 2:
                cluster_sizes.append(remaining_cells)
                break
            
            # –°–æ–∑–¥–∞—ë–º –∫–ª–∞—Å—Ç–µ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            cluster_size = random.randint(min_size, current_max_size)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ª–∏–±–æ 0, –ª–∏–±–æ >= min_size –∫–ª–µ—Ç–æ–∫
            remaining_after = remaining_cells - cluster_size
            if remaining_after > 0 and remaining_after < min_size:
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–∞–ª–µ–Ω—å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
                cluster_size = remaining_cells - min_size
            
            cluster_sizes.append(cluster_size)
            remaining_cells -= cluster_size
        
        return cluster_sizes

    def _place_guaranteed_clusters(self, island_list, used_indices, cluster_plan, resource_type):
        """–†–∞–∑–º–µ—â–∞–µ—Ç –∫–ª–∞—Å—Ç–µ—Ä—ã —Å –ü–†–û–í–ï–†–ö–û–ô —Ä–∞–∑–º–µ—Ä–æ–≤"""
        clusters = []
        cluster_sizes = cluster_plan['cluster_sizes']
        min_size = self.min_cluster_sizes[resource_type]
        
        print(f"    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è {len(cluster_sizes)} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: {cluster_sizes}")
        
        for cluster_id, target_size in enumerate(cluster_sizes):
            print(f"    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∞ {cluster_id + 1} —Ä–∞–∑–º–µ—Ä–æ–º {target_size}...")
            
            # –°–æ–∑–¥–∞—ë–º –∫–ª–∞—Å—Ç–µ—Ä —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            cluster = self._create_guaranteed_cluster(
                island_list, used_indices, target_size, min_size
            )
            
            if cluster and len(cluster) >= min_size:
                clusters.append(cluster)
                # –û—Ç–º–µ—á–∞–µ–º –∫–ª–µ—Ç–∫–∏ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
                for idx in cluster:
                    used_indices.add(idx)
                print(f"      ‚úÖ –°–æ–∑–¥–∞–Ω –≤–∞–ª–∏–¥–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä: {len(cluster)} –∫–ª–µ—Ç–æ–∫")
            else:
                print(f"      ‚ùå –ö–ª–∞—Å—Ç–µ—Ä —Å–ª–∏—à–∫–æ–º –º–∞–ª –∏–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω: {len(cluster) if cluster else 0} –∫–ª–µ—Ç–æ–∫")
        
        return clusters

    def _create_guaranteed_cluster(self, island_list, used_indices, target_size, min_size):
        """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞—Å—Ç–µ—Ä —Å –ì–ê–†–ê–ù–¢–ò–ï–ô –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"""
        available_indices = [i for i in range(len(island_list)) if i not in used_indices]
        
        if len(available_indices) < min_size:
            print(f"      ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª–µ—Ç–æ–∫: {len(available_indices)} < {min_size}")
            return []
        
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞
        max_attempts = 20
        best_cluster = []
        
        for attempt in range(max_attempts):
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–ª–µ—Ç–∫—É
            start_idx = random.choice(available_indices)
            cluster = [start_idx]
            
            # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ —Ä–∞—Å—à–∏—Ä—è–µ–º –∫–ª–∞—Å—Ç–µ—Ä
            expanded = self._expand_cluster_aggressively(
                island_list, cluster, available_indices, target_size, used_indices
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if len(expanded) > len(best_cluster):
                best_cluster = expanded.copy()
            
            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏–ª–∏ –º–∏–Ω–∏–º—É–º–∞, –º–æ–∂–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
            if len(expanded) >= target_size or len(expanded) >= min_size:
                best_cluster = expanded
                break
        
        return best_cluster

    def _expand_cluster_aggressively(self, island_list, cluster, available_indices, target_size, used_indices):
        """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ —Ä–∞—Å—à–∏—Ä—è–µ—Ç –∫–ª–∞—Å—Ç–µ—Ä –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"""
        current_cluster = cluster.copy()
        
        while len(current_cluster) < target_size:
            # –ò—â–µ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Å–µ–¥–µ–π
            neighbors = []
            for idx in current_cluster:
                cell = island_list[idx]
                for candidate_idx in available_indices:
                    if (candidate_idx not in used_indices and 
                        candidate_idx not in current_cluster):
                        candidate_cell = island_list[candidate_idx]
                        if self._are_neighbors(cell, candidate_cell):
                            neighbors.append(candidate_idx)
            
            if neighbors:
                # –î–æ–±–∞–≤–ª—è–µ–º –ª—É—á—à–µ–≥–æ —Å–æ—Å–µ–¥–∞
                new_idx = random.choice(neighbors)
                current_cluster.append(new_idx)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Å–µ–¥–µ–π, –±–µ—Ä—ë–º –ª—é–±—É—é –±–ª–∏–∑–∫—É—é –∫–ª–µ—Ç–∫—É
                remaining = [idx for idx in available_indices 
                           if idx not in used_indices and idx not in current_cluster]
                if remaining:
                    # –ë–µ—Ä—ë–º –±–ª–∏–∂–∞–π—à—É—é –∫ —Ü–µ–Ω—Ç—Ä—É –∫–ª–∞—Å—Ç–µ—Ä–∞
                    cluster_center = self._calculate_cluster_center(island_list, current_cluster)
                    closest_idx = min(remaining, 
                                    key=lambda idx: self._distance_to_point(
                                        island_list[idx], cluster_center))
                    current_cluster.append(closest_idx)
                else:
                    break  # –ë–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫
        
        return current_cluster

    def _calculate_cluster_center(self, island_list, cluster):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ü–µ–Ω—Ç—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞"""
        if not cluster:
            return (0, 0)
        
        total_x = sum(island_list[idx][0] for idx in cluster)
        total_y = sum(island_list[idx][1] for idx in cluster)
        
        return (total_x / len(cluster), total_y / len(cluster))

    def _distance_to_point(self, cell, point):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∫–ª–µ—Ç–∫–∏ –¥–æ —Ç–æ—á–∫–∏"""
        return abs(cell[0] - point[0]) + abs(cell[1] - point[1])

    def _are_neighbors(self, cell1, cell2):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –¥–≤–µ –∫–ª–µ—Ç–∫–∏ —Å–æ—Å–µ–¥–Ω–∏–º–∏"""
        x1, y1 = cell1
        x2, y2 = cell2
        return (abs(x1 - x2) == 1 and y1 == y2) or (abs(y1 - y2) == 1 and x1 == x2)

    def _get_resource_emoji(self, resource_type):
        emojis = {
            ResourceType.FOREST: "üå≤",
            ResourceType.STONE: "üóø", 
            ResourceType.GOLD_MINE: "‚≠ê"
        }
        return emojis.get(resource_type, "üì¶")

    def _verify_cluster_sizes(self, resources, island_cells):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—Å–µ –∫–ª–∞—Å—Ç–µ—Ä—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–∞–º"""
        print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –†–ê–ó–ú–ï–†–û–í –ö–õ–ê–°–¢–ï–†–û–í:")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º —Ä–µ—Å—É—Ä—Å–æ–≤
        resource_positions = {}
        for cell, resource_type in resources.items():
            if resource_type not in resource_positions:
                resource_positions[resource_type] = []
            resource_positions[resource_type].append(cell)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø —Ä–µ—Å—É—Ä—Å–∞
        for resource_type, positions in resource_positions.items():
            if resource_type == ResourceType.MEADOW:
                continue
                
            clusters = self._find_connected_clusters(positions)
            cluster_sizes = [len(cluster) for cluster in clusters]
            min_required = self.min_cluster_sizes[resource_type]
            
            emoji = self._get_resource_emoji(resource_type)
            name = self.get_resource_name(resource_type)
            
            print(f"{emoji} {name}: {len(clusters)} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤, —Ä–∞–∑–º–µ—Ä—ã: {cluster_sizes}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏—è
            invalid_clusters = [size for size in cluster_sizes if size < min_required]
            if invalid_clusters:
                print(f"    ‚ùå –ù–ê–†–£–®–ï–ù–ò–Ø: {len(invalid_clusters)} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –º–µ–Ω—å—à–µ {min_required}: {invalid_clusters}")
            else:
                print(f"    ‚úÖ –í—Å–µ –∫–ª–∞—Å—Ç–µ—Ä—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –º–∏–Ω–∏–º—É–º—É {min_required}")

    def _find_connected_clusters(self, positions):
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–≤—è–∑–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã –≤ —Å–ø–∏—Å–∫–µ –ø–æ–∑–∏—Ü–∏–π"""
        if not positions:
            return []
        
        positions_set = set(positions)
        visited = set()
        clusters = []
        
        for pos in positions:
            if pos not in visited:
                cluster = []
                queue = deque([pos])
                visited.add(pos)
                
                while queue:
                    current = queue.popleft()
                    cluster.append(current)
                    
                    # –ò—â–µ–º —Å–æ—Å–µ–¥–µ–π
                    x, y = current
                    neighbors = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]
                    
                    for neighbor in neighbors:
                        if neighbor in positions_set and neighbor not in visited:
                            visited.add(neighbor)
                            queue.append(neighbor)
                
                clusters.append(cluster)
        
        return clusters
