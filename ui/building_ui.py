"""UI –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∑–¥–∞–Ω–∏–π"""
import pygame
from world.buildings import BuildingType
from ui.building_icons import BuildingIcons

class BuildingUI:
    def __init__(self, screen, game):
        self.screen = screen
        self.game = game
        self.font = pygame.font.Font(None, 24)
        self.small_font = pygame.font.Font(None, 18)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ UI
        self.selected_building_type = None
        self.show_building_menu = False
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–¥–∞–Ω–∏—è –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
        self.buildable_types = [
            BuildingType.FARM,
            BuildingType.SAWMILL,
            BuildingType.QUARRY,
            BuildingType.GOLD_MINE
        ]

    def handle_event(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è UI —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞"""
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_b:  # –ö–ª–∞–≤–∏—à–∞ B - –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
                self.show_building_menu = not self.show_building_menu
                return f"building_menu_{'opened' if self.show_building_menu else 'closed'}"
            
            # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –∑–¥–∞–Ω–∏–π
            if event.key == pygame.K_1:
                self.selected_building_type = BuildingType.FARM
                return "building_selected"
            elif event.key == pygame.K_2:
                self.selected_building_type = BuildingType.SAWMILL
                return "building_selected"
            elif event.key == pygame.K_3:
                self.selected_building_type = BuildingType.QUARRY
                return "building_selected"
            elif event.key == pygame.K_4:
                self.selected_building_type = BuildingType.GOLD_MINE
                return "building_selected"
            elif event.key == pygame.K_ESCAPE:
                self.selected_building_type = None
                self.show_building_menu = False
                return "building_cancelled"
        
        elif event.type == pygame.MOUSEBUTTONDOWN:
            if event.button == 1:  # –õ–µ–≤—ã–π –∫–ª–∏–∫
                if self.selected_building_type:
                    # –ü–æ–ø—ã—Ç–∫–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
                    mouse_x, mouse_y = event.pos
                    grid_x = mouse_x // self.game.CELL_SIZE if hasattr(self.game, 'CELL_SIZE') else mouse_x // 20
                    grid_y = mouse_y // self.game.CELL_SIZE if hasattr(self.game, 'CELL_SIZE') else mouse_y // 20
                    
                    return f"build_attempt_{grid_x}_{grid_y}"
            
            elif event.button == 3:  # –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ - –æ—Ç–º–µ–Ω–∞
                self.selected_building_type = None
                return "building_cancelled"
        
        return None

    def draw(self):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç UI —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞"""
        if self.show_building_menu:
            self.draw_building_menu()
        
        if self.selected_building_type:
            self.draw_selected_building_indicator()
        
        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–¥–∞–Ω–∏–π –Ω–∞ –∫–∞—Ä—Ç–µ
        self.draw_buildings_on_map()

    def draw_building_menu(self):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∑–¥–∞–Ω–∏–π"""
        menu_width = 300
        menu_height = 200
        menu_x = 20
        menu_y = 100
        
        # –§–æ–Ω –º–µ–Ω—é
        menu_rect = pygame.Rect(menu_x, menu_y, menu_width, menu_height)
        overlay = pygame.Surface((menu_width, menu_height), pygame.SRCALPHA)
        overlay.fill((0, 0, 0, 180))
        self.screen.blit(overlay, (menu_x, menu_y))
        pygame.draw.rect(self.screen, (255, 255, 255), menu_rect, 2)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_text = self.font.render("–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ (B)", True, (255, 255, 255))
        self.screen.blit(title_text, (menu_x + 10, menu_y + 10))
        
        # –°–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π
        y_offset = menu_y + 40
        building_names = {
            BuildingType.FARM: "1. –§–µ—Ä–º–∞ (–ª—é–±–∞—è —Å—É—à–∞)",
            BuildingType.SAWMILL: "2. –õ–µ—Å–æ–ø–∏–ª–∫–∞ (–ª–µ—Å)",
            BuildingType.QUARRY: "3. –ö–∞–º–µ–Ω–æ–ª–æ–º–Ω—è (–∫–∞–º–µ–Ω—å)", 
            BuildingType.GOLD_MINE: "4. –®–∞—Ö—Ç–∞ (–∑–æ–ª–æ—Ç–æ)"
        }
        
        for building_type in self.buildable_types:
            name = building_names[building_type]
            color = (255, 255, 100) if building_type == self.selected_building_type else (255, 255, 255)
            
            text = self.small_font.render(name, True, color)
            self.screen.blit(text, (menu_x + 10, y_offset))
            
            # –†–∏—Å—É–µ–º –∏–∫–æ–Ω–∫—É –∑–¥–∞–Ω–∏—è
            icon_rect = pygame.Rect(menu_x + 250, y_offset, 20, 15)
            BuildingIcons.draw_building_icon(self.screen, icon_rect, building_type, color)
            
            y_offset += 25
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        instructions = [
            "ESC - –æ—Ç–º–µ–Ω–∞",
            "–ü–ö–ú - –æ—Ç–º–µ–Ω–∞", 
            "–õ–ö–ú - –ø–æ—Å—Ç—Ä–æ–∏—Ç—å"
        ]
        
        for i, instruction in enumerate(instructions):
            text = self.small_font.render(instruction, True, (200, 200, 200))
            self.screen.blit(text, (menu_x + 10, y_offset + 10 + i * 15))

    def draw_selected_building_indicator(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–¥–∞–Ω–∏—è"""
        if not self.selected_building_type:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –º—ã—à–∏
        mouse_x, mouse_y = pygame.mouse.get_pos()
        
        # –†–∏—Å—É–µ–º –ø—Ä–µ–≤—å—é –∑–¥–∞–Ω–∏—è –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
        preview_rect = pygame.Rect(mouse_x - 10, mouse_y - 10, 20, 20)
        
        # –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
        preview_surface = pygame.Surface((20, 20), pygame.SRCALPHA)
        preview_surface.fill((255, 255, 255, 100))
        self.screen.blit(preview_surface, (mouse_x - 10, mouse_y - 10))
        
        # –ò–∫–æ–Ω–∫–∞ –∑–¥–∞–Ω–∏—è
        BuildingIcons.draw_building_icon(self.screen, preview_rect, self.selected_building_type, (255, 255, 255))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∑–¥–∞–Ω–∏–∏
        building_names = {
            BuildingType.FARM: "–§–µ—Ä–º–∞",
            BuildingType.SAWMILL: "–õ–µ—Å–æ–ø–∏–ª–∫–∞",
            BuildingType.QUARRY: "–ö–∞–º–µ–Ω–æ–ª–æ–º–Ω—è",
            BuildingType.GOLD_MINE: "–®–∞—Ö—Ç–∞ –∑–æ–ª–æ—Ç–∞"
        }
        
        name = building_names.get(self.selected_building_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        text = self.small_font.render(f"–°—Ç—Ä–æ–∏–º: {name}", True, (255, 255, 255))
        text_rect = text.get_rect()
        
        # –§–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        bg_rect = pygame.Rect(10, 10, text_rect.width + 10, text_rect.height + 5)
        pygame.draw.rect(self.screen, (0, 0, 0), bg_rect)
        pygame.draw.rect(self.screen, (255, 255, 255), bg_rect, 1)
        
        self.screen.blit(text, (15, 12))

    def draw_buildings_on_map(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–¥–∞–Ω–∏–π —Å —É—á–µ—Ç–æ–º —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not hasattr(self.game, 'building_system') or not hasattr(self.game, 'map_offset_x'):
            return
        
        cell_size = getattr(self.game, 'CELL_SIZE', 20)
        
        for (x, y), building in self.game.building_system.buildings.items():
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–µ—Ç–∫–∏ –≤ —ç–∫—Ä–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
            screen_x = self.game.map_offset_x + (x - self.game.map_min_x) * cell_size
            screen_y = self.game.map_offset_y + (y - self.game.map_min_y) * cell_size
            
            # –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è –∏–∫–æ–Ω–∫–∏
            margin = cell_size * 0.15
            icon_rect = pygame.Rect(
                screen_x + margin,
                screen_y + margin, 
                cell_size - 2 * margin,
                cell_size - 2 * margin
            )
            
            if icon_rect.width <= 0 or icon_rect.height <= 0:
                continue
            
            player_color = self.get_correct_player_color(building.owner_id)
            
            # –†–∏—Å—É–µ–º –∏–∫–æ–Ω–∫—É –∑–¥–∞–Ω–∏—è
            BuildingIcons.draw_building_icon(self.screen, icon_rect, building.type, player_color)



    def get_correct_player_color(self, player_id):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –ë–ï–ó —Å–ø–∞–º–∞"""
        # –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ –ø–æ ID –≤ —Å–∏—Å—Ç–µ–º–µ –≤—ã–±–æ—Ä–∞
        if hasattr(self.game, 'player_selection') and self.game.player_selection:
            for player in self.game.player_selection.players:
                if player.player_id == player_id:
                    # –£–ë–ò–†–ê–ï–ú print - –æ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è 60 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É!
                    # print(f"üé® –¶–≤–µ—Ç –¥–ª—è –∏–≥—Ä–æ–∫–∞ {player_id} ({player.name}): {player.color}")
                    return player.color
        
        # –¶–≤–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–≥—Ä–æ–∫
        default_colors = {1: (255, 50, 50), 2: (50, 50, 255)}
        color = default_colors.get(player_id, (255, 255, 255))
        
        # –£–ë–ò–†–ê–ï–ú –∏ —ç—Ç–æ—Ç print —Ç–æ–∂–µ
        # print(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∏–≥—Ä–æ–∫–∞ {player_id}: {color}")
        return color



    def get_player_color(self, player_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –∏–≥—Ä–æ–∫–∞"""
        if hasattr(self.game, 'player_selection'):
            for player in self.game.player_selection.players:
                if player.player_id == player_id:
                    return player.color
        
        # –¶–≤–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        colors = {1: (255, 50, 50), 2: (50, 50, 255)}
        return colors.get(player_id, (255, 255, 255))

    def try_build(self, grid_x, grid_y):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø–æ–ø—ã—Ç–∫–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–≥—Ä–æ–∫–æ–º"""
        if not self.selected_building_type:
            return False, "–ù–µ –≤—ã–±—Ä–∞–Ω —Ç–∏–ø –∑–¥–∞–Ω–∏—è"
        
        if not hasattr(self.game, 'building_system'):
            return False, "–°–∏—Å—Ç–µ–º–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –¢–ï–ö–£–©–ï–ì–û –∏–≥—Ä–æ–∫–∞ (—á–µ–π —Å–µ–π—á–∞—Å —Ö–æ–¥)
        if hasattr(self.game, 'get_current_player'):
            current_player = self.game.get_current_player()
            current_player_id = current_player.player_id
            print(f"üî® –°—Ç—Ä–æ–∏—Ç –∏–≥—Ä–æ–∫: {current_player.name} (ID: {current_player_id})")
        else:
            current_player_id = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫
            print(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–≥—Ä–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {current_player_id}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ—Å—Ç—Ä–æ–∏—Ç—å
        success, message = self.game.building_system.build(
            grid_x, grid_y, self.selected_building_type, current_player_id,
            self.game.island, self.game.province_map
        )
        
        if success:
            print(f"‚úÖ {message}")
            self.selected_building_type = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
        else:
            print(f"‚ùå {message}")
        
        return success, message

